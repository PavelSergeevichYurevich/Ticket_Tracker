### Техническое задание на разработку тикет-трекера

#### 1. Введение
Цель проекта — создание тикет-трекера, позволяющего пользователям через Telegram отправлять заявки (тикеты), которые поступают на веб-сервис. На веб-интерфейсе техники могут обрабатывать заявки, менять их статус, добавлять комментарии и отслеживать прогресс.

#### 2. Основные требования

##### 2.1 Telegram-бот
- Цель: взаимодействие пользователей с системой через Telegram.
- Функционал:
  - Возможность создания заявки с указанием описания проблемы.
  - Подтверждение успешного создания заявки.
  - Уведомления о смене статуса заявки (например, "Принята в работу", "Завершена").
  - Возможность просмотра статуса ранее созданных заявок.
  
- Детали интеграции:
  - Реализовать с помощью библиотеки python-telegram-bot или аналогичной.
  - Обработку данных передавать на сервер (API) с дальнейшей записью в базу данных.

##### 2.2 Веб-интерфейс для техников
- Цель: удобное управление заявками и их обработка.
- Функционал:
  - Логин/лог-аут для техников (авторизация).
  - Просмотр списка заявок.
  - Фильтрация и сортировка заявок по статусу, времени создания, приоритету.
  - Изменение статуса заявки (например, "В работе", "Завершена").
  - Добавление комментариев к заявке.
  - Уведомление пользователей через Telegram о статусе заявки и комментариях.

- Интерфейс:
  - Адаптивный дизайн для работы на ПК и мобильных устройствах.
  - Простой и понятный интерфейс с таблицей заявок.

##### 2.3 Взаимодействие между Telegram-ботом и веб-интерфейсом
- API:
  - RESTful API для обработки данных между Telegram-ботом и веб-приложением.
  - Метод для создания новой заявки (POST запрос).
  - Методы для изменения статуса заявки и добавления комментариев.

##### 2.4 База данных
- Структура:
  - Таблица заявок: ID, описание, время создания, статус, комментарии, автор заявки.
  - Таблица техников: ID, имя, логин, пароль.
  - Таблица комментариев: ID, ID заявки, текст комментария, время добавления.

- Тип базы данных: PostgreSQL или другая реляционная БД.

#### 3. Технологии

##### 3.1 Backend
- Язык программирования: Python (рекомендуется использование фреймворка FastAPI или Flask).
- Веб-сервер: Uvicorn или Gunicorn.
- База данных: PostgreSQL.

##### 3.2 Frontend
- HTML/CSS/JavaScript (рекомендуется использование фреймворков Bootstrap для дизайна и Vue.js или React для динамики).
  
##### 3.3 Интеграция с Telegram
- Библиотеки: python-telegram-bot или aiogram.
  
#### 4. Основные сценарии использования

##### 4.1 Пользователь создает заявку
1. Пользователь открывает Telegram и пишет боту описание проблемы.
2. Бот создает новую заявку и отправляет ее на сервер.
3. Пользователь получает уведомление о том, что заявка успешно создана.

##### 4.2 Техник обрабатывает заявку
1. Техник заходит на веб-интерфейс и просматривает список заявок.
2. Техник выбирает заявку, меняет ее статус на "В работе".
3. При необходимости техник добавляет комментарии.
4. Пользователь получает уведомление о смене статуса и комментариях.

#### 5. Безопасность
- Защита API с помощью JWT токенов для авторизации.
- Шифрование паролей техников.
- Ограничение доступа к веб-интерфейсу только для авторизованных пользователей.

#### 6. Дополнительные требования
- Логирование всех действий (создание заявки, смена статуса, добавление комментариев).
- Поддержка нескольких техников, работающих с разными заявками одновременно.
- Возможность расширения функционала, например, добавление приоритета заявок.

#### 7. Временные рамки
Ожидаемый срок выполнения: 2-4 недели с учетом тестирования и исправления багов.

#### 8. Тестирование
- Модульное тестирование бота и веб-интерфейса.
- Тестирование безопасности (например, тестирование авторизации и защиты API).
  
#### 9. Документация
- Техническая документация по установке, настройке и использованию системы.
- Инструкции для техников по работе с веб-интерфейсом.